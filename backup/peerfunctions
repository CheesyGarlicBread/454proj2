public int insert(String filename)
	{
		File file = new File(filename);
		filename = file.getName();
		if (!file.exists())
		{
			System.out.println("ERROR: File does not exist!");
			return -1;
		}                                       
		
		//Create an instance of FileElement class to store the attributes for the new file
		FileElement newElement = new FileElement(filename, file.length(), chunkSize, "rmi://"+this.getIp()+":"+this.getPort()+"/PeerService", 1, true);
		
		//Fill the block_complete array since the file is local and complete
		Arrays.fill(newElement.block_complete, true);
		
		//If localFiles vector already contains the filename, error out
		if ((localFiles.contains(filename)) || (localList.contains(newElement)))
		{
			System.out.println("ERROR: File already exists on local host");
			return 1;
		}
		
		//Add new filename into localFiles vector
		localFiles.add(filename);
		
		//Insert FileElelment object into linkedlist
		localList.add(newElement);
		
		if (state == CONNECTED){
			System.out.println("Notifying peers of update");
			notifyPeersFileUpdate();
		}
		
		System.out.println("New file " + filename + " has been inserted successfully.");
		
		return 1;
	}
	
	//Notify all other peers in peerlist that a new file has been added
	private void notifyPeersFileUpdate()
	{
		ArrayList<Peer> peerList = peers.getPeers();
		
		//Connect to each peer in peerList
		for (int i = 0; i < peerList.size(); i++)
		{
			Peer p = peerList.get(i);
			try {
				//Connect to remote host
				PeerInterface newpeer = null;
				try {
					newpeer = (PeerInterface)Naming.lookup("rmi://"+p.getIp()+":"+p.getPort()+"/PeerService");
				} catch (MalformedURLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (NotBoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				//RMI function call - Other peers update their files
				if(newpeer.getState() == CONNECTED)
					newpeer.updateFileList();
			} catch (RemoteException e) {
				e.printStackTrace();
			} catch (NullPointerException e){
				e.printStackTrace();
			}
		}
	}
	
	//This function is called remotely when an update to another hosts filelist has
	//occured. It will attempt to update the local file list.
	public void updateFileList() throws RemoteException
	{
		Thread t = new Thread(new Runnable() {
		
		@Override
		public void run() {
			//System.out.println("updateFileList()");
			ArrayList<Peer> peerList = peers.getPeers();
			try
			{
				//Search through all peers
				//Add all external file frames to localList and localFiles
				for(int i = 0; i < peerList.size(); i++)
				{
					Peer p = peerList.get(i);
					PeerInterface newpeer = null;
					try{
						newpeer = (PeerInterface)Naming.lookup("rmi://"+p.getIp()+":"+p.getPort()+"/PeerService");
						if(newpeer.getState() == CONNECTED){
							System.out.println("Updating IP: " + newpeer.getIp());
						
							ArrayList<FileElement> tmpList = newpeer.returnList();
							//updateCurrentFileFrames();
							getNewFileFrames(tmpList);
						}
					}catch(RemoteException e){
					}
				}
				downloadFiles();
			
			}catch(MalformedURLException e){
			}catch(NotBoundException e){
			}
		}
		}); //End thread
		t.start();
	}
	
	private void getNewFileFrames(ArrayList<FileElement> tmpList)
	{
		for (int i = 0; i < tmpList.size(); i++)
		{
			FileElement e = tmpList.get(i);
			if (!localFiles.contains(e.filename))
			{
				//Create an instance of FileElement class to store the attributes for the new file
				FileElement newElement = new FileElement(e.filename, e.filesize, chunkSize, "rmi://"+this.getIp()+":"+this.getPort()+"/PeerService", 0, false);
				
				//Find servers that have this file
				//++newElement.remoteList = searchPeersForFile(newElement.filename);
				
				//Insert FileElement object into linkedlist and filename vector
				Arrays.fill(newElement.block_complete, false);
				Arrays.fill(newElement.block_available, 0);
				localList.add(newElement);
				localFiles.add(newElement.filename);
				//++findBlockAvailability(newElement);	
			}
		}
	}
	
	public ArrayList<FileElement> returnList()
	{
		return localList;
	}
	
	private void downloadFiles()
	{
		//If there is at least one missing chunk from the file 'e', attempt to download file 'e'
		for (int j = 0; j < localList.size(); j++)
		{
			FileElement e = localList.get(j);
			e.remoteList = searchPeersForFile(e.filename);
			
			//System.out.println("Checking " + e.filename + " file for local completeness");
			for (int i = 0; i < e.block_complete.length; i++)
			{
				if (e.block_complete[i] == false)
				{
					//System.out.println(e.currentServer);
					downloadFile(e);
					break;
				}
			}
		}
	}
	
	private int downloadFile(FileElement file)
	{
		//System.out.println("downloadFile()");
		//RandomAccessFile to write chunks to
		File newfile = new File(downloadFolder + file.filename);
		//System.out.println("saving file to " + file.filename);
		RandomAccessFile output = null;
		
		try {
			output = new RandomAccessFile(newfile, "rw");
		} catch (FileNotFoundException e1) {
			e1.printStackTrace();
		}

		//Chunk buffer for downloaded data
		byte[] filebuffer = null;
		FileElement targethost = null;

		//Find a server that has this particular chunk
		for (FileElement e : file.remoteList)
		{
			if (e.filecomplete == true)
			{
				targethost = e;
			}
		}
		
		
		//For each chunk of the file
		for (int i = 0; i < file.block_complete.length; i++)
		{
			if (file.block_complete[i] == false)
			{
				filebuffer = downloadFileChunk(file, i, chunkSize, targethost.currentServer);
				
				try {
					output.seek(i*chunkSize);
					output.write(filebuffer);
					file.block_complete[i] = true;
				} catch (IOException e1) {
					e1.printStackTrace();
				}
			}
		}
		
		try {
			output.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		//System.out.println("Finished downloadFile()");
		return 0;
	}
	
	private byte[] downloadFileChunk(FileElement file, int chunkID, int chunkSize, String server)
	{
		//System.out.println("downloadFileChunk");
		byte[] filebuffer = null;
		
		try
		{
			//Connect to remote host
			PeerInterface newpeer = (PeerInterface)Naming.lookup(server);
			if(newpeer.getState() == CONNECTED){
				//	Chunk buffer for downloaded data
				filebuffer = newpeer.uploadFileChunk(file.filename, chunkID*chunkSize, chunkSize);
			}
		
		}catch(RemoteException e){
			System.out.println(e);
		}catch(MalformedURLException e){
			System.out.println(e);
		}catch(NotBoundException e){
			System.out.println(e);
		}catch (IOException e){
			System.out.println(e);
		}
		
		//Return byte array of size 'chunkSize'
		return filebuffer;
	}
	
	public byte[] uploadFileChunk(String filename, int offset, int length)
	{
		
		//System.out.println("Upload requested");
		try
		{
			//Create a byte buffer of size: 
			File file = new File(downloadFolder + filename);
			
			byte buffer[] = null;
			RandomAccessFile input = new RandomAccessFile(file,"r");
			input.seek(offset);
			if ((offset+length) > file.length()){
				 buffer = new byte[(int)(file.length()-offset)];
				input.readFully(buffer,0,(int)(file.length()-offset));
			}
			else
			{
				buffer = new byte[length];
				input.readFully(buffer, 0, length);
			}
			
			input.close();
			//Return byte array to caller
			return (buffer);
			
		} catch(Exception e){
			//System.out.println("FileImpl: "+e);
		}
		return null;
	}
	
	//Returns a link list of the FileElements from all peers
	private ArrayList<FileElement> searchPeersForFile(String filename)
	{
		//System.out.println("searchPeersForFile()");
		ArrayList<FileElement> remoteList = new ArrayList<FileElement>();
		
		//List of existing peers
		ArrayList<Peer> peerList = peers.getPeers();
		
		//Search through each peer in peerList
		
		for (int i = 0; i < peerList.size(); i++)
		{
			Peer p = peerList.get(i);
			try
			{
				PeerInterface peer = (PeerInterface)Naming.lookup("rmi://"+p.getIp()+":"+p.getPort()+"/PeerService");
				if(peer.getState() == CONNECTED){
					//Get each peer's local file list
					ArrayList<FileElement> tmpList = peer.returnList();
					
					//For each file in the remote file list, search for files with the same name as filename
					
					for(int j = 0; j < tmpList.size(); j++)
					{
						FileElement e = tmpList.get(j);
						if (e.filename.equals(filename))
						{
							//Add all files with matching filename to the new LinkedList object
							remoteList.add(e);
						}
					}
				}
			}catch(RemoteException e){
				System.out.println(e);
			}catch(MalformedURLException e){
				System.out.println(e);
			}catch(NotBoundException e){
				System.out.println(e);
			}
		}
		
		//Return a linked list object containing all of the FileElements for the matching filenames
		return remoteList;
	}
	
	int open(String filename, char operation)
	{
		if ((operation != 'r') || (operation != 'w'))
		{
			System.out.println("Invalid operator");
			return 0;
		}
		
		File file = new File(downloadFolder + filename);
		//System.out.println("saving file to " + file.filename);
		RandomAccessFile rndFile = null;
		
		try {
			rndFile = new RandomAccessFile(file, String.valueOf(operation));
		} catch (FileNotFoundException e1) {
			e1.printStackTrace();
			return 0;
		}

		try
		{
			rndFile.close();
		} 
		catch(Exception e)
		{
			return 0;
		}
		
		return 1;
	}
	
	int close(String filename)
	{
		
		return 1;
	}
	
	int read(String filename, char buf[], int offset, int bufsize)
	{
		
		return 1;
	}
	
	int write(String filename, char buf[], int offset, int bufsize)
	{
		
		return 1;
	}